--- 
- hosts: all
  become: yes
  become_user: root
  

  task:

  - name: Start firewalld and enable at start
    systemd: 
      name: firewalld 
      state: started
      enabled: true

      - name: Install epel from remote repo on CentOS 7
  yum: name=https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm state=present
  when: ansible_distribution_major_version == "7"

- name: Install remi from remote repo on CentOS 7
  yum: name=http://rpms.remirepo.net/enterprise/remi-release-7.rpm state=present
  when: ansible_distribution_major_version == "7"

- name: Update Yum
  yum: 
    name: '*' 
    state: latest

- name: Install basic packages
  yum: 
    name:
      - yum-utils
      - vim
      - git
      - vim
      - man
      - zip
      - epel-release
      - python-pip


- name: Install necessary MariaDB packages
  yum: 
    name:
      - mariadb-server
      - mariadb
      - MySQL-python

- name: Start the MariaDB service
  service: name=mariadb state=started enabled=true

  - name: Add allow rule for 3306 to firewall
  firewalld: 
    zone: public 
    port: 3306/tcp 
    permanent: true 
    state: enabled
  notify:
  - Restart the mariadb service

  - name: Set the root password for all root accounts
  mysql_user: name=root host={{ item }} password='' priv=*.*:ALL,GRANT
  with_items:
    - "{{ ansible_hostname }}"
    - 127.0.0.1
    - ::1
    - localhost
  when: ansible_hostname != 'localhost'

- name: Configure mariadb for easy access as root user
  template: src=.my.cnf dest=~/.my.cnf owner=root group=root mode=0644

- name: ensure anonymous users are not in the database
  mysql_user: name='' host=* state=absent

- name: Default User
  mysql_user: name={{ mariadb_admin_user }} host=% password={{ mariadb_admin_password }} priv=*.*:ALL,GRANT state=present

- name: remove the test database
  mysql_db: name=test state=absent
  notify:
    - Restart the mariadb service
- name: Restart the mariadb service
  service: name=mariadb state=restarted enabled=true
#- name: "Create fog data directory"
#  shell: |
#    mkdir /var/lib/mysql 
#    chown -R mysql:mysql /var/lib/mysql 
#    mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql 




##################################################
### Install necessary fog packages

- name: Install FOG packages (Step 1)
  yum: 
    name:
      - bc 
      - curl 
      - gcc 
      - gcc-c++ 
      - gzip 
      - httpd 
      - lftp 
      - m4 
      - make 
      - mod_ssl 
      - net-tools 
      - nfs-utils 
      - php 
      - php-bcmath 
      - php-cli 
      - php-common 
      - php-fpm 
      - php-gd 
      - php-ldap 
      - php-mbstring 
      - php-mcrypt 
      - php-mysqlnd 
      - php-process 
      - tar 
      - tftp-server 
      - unzip 
      - vsftpd 
      - wget 
      - xinetd
    enablerepo: remi-php70 

      # Install pyOpenSSL python package.
- name: "Install pyOpenSSL with pip"
  pip:
    name: pyOpenSSL

- name: Update Yum Again (FOG)
  yum: 
    name: '*' 
    state: latest

    - name: "Include FOG Variables"
  include_vars: "fog-RedHat-vars.yml"

# BEGIN configure firewalld for necessary FOG services

- firewalld:
    service: https
    permanent: true
    state: enabled

- firewalld:
    service: http
    permanent: true
    state: enabled

- firewalld:
    service: tftp
    permanent: true
    state: enabled

- firewalld:
    service: ftp
    permanent: true
    state: enabled

- firewalld:
    service: mysql
    permanent: true
    state: enabled

- firewalld:
    service: nfs
    permanent: true
    state: enabled

- firewalld:
    service: mountd
    permanent: true
    state: enabled

- firewalld:
    service: rpc-bind
    permanent: true
    state: enabled

- firewalld:
    service: proxy-dhcp
    permanent: true
    state: enabled

- firewalld:
    service: samba
    permanent: true
    state: enabled

- name: "Reload Firewalld to take in new changes"
  systemd:
    name: firewalld
    state: reloaded
# END configure firewalld for necessary FOG services


# Checker to see if a the fog project directory exists

- name: "Download FOG 1.4.4 from Github to /root/fog_1.4.4.tar.gz"
  get_url:
    url:  https://github.com/FOGProject/fogproject/releases/download/1.4.4/fog_1.4.4.tar.gz
    dest: /root/fog_1.4.4.tar.gz
    checksum: md5:138c78ebc0f49c7cb59fdcf792361f0d 

- name: "Extract download to folder"
  unarchive:
    src: /root/fog_1.4.4.tar.gz
    dest: /root/
    remote_src: yes

- name: Generate FOG password to use
  shell: openssl rand -base64 32
  register: openssl_password

- set_fact:
    password: "{{ openssl_password.stdout }}"

- name: Create FOG User
  user: 
    name: '{{ username }}'
    shell: /bin/bash 
    createhome: yes  
    password: '{{ item.password | password_hash("sha512") }}'
    update_password: on_create
  with_items: 
    - { password: '{{ password }}' }  

# Configure PHP INI with new file upload sizes
- name: "Replace POST Max Size (PHPINI)"
  replace:
    path: '{{ phpini }}'
    regexp: 'post_max_size = 8M'
    replace: 'post_max_size = 3000M'
  
- name: "Replace Max File Size (PHPINI)"
  replace:
    path: '{{ phpini }}'
    regexp: 'upload_max_filesize = 2M'
    replace: 'upload_max_filesize = 3000M'

- name: "Replace Max Input Vars (PHPINI)"
  replace:
    path: '{{ phpini }}'
    regexp: 'max_input_vars = 1000'
    replace: 'max_input_vars = 250000'

# BEGIN configureHttpd
# Create FOG Web Folder
- name: Create FOG Web Folder
  file:
    path: /var/www/html/fog
    state: directory
    owner: apache
    group: apache
    mode: 0755
  register: fogwebfoldercreated

# Create Symlink in webdir
- name: "Create Symlink for FOG Webdir"
  file:
    src: /var/www/html/fog
    dest: /var/www/fog
    owner: root
    group: root
    state: link
    force: yes
  when: fogwebfoldercreated.changed

- name: "Copy files to webdir"
  shell: "cp -Rf {{ fogprojectdir }}/{{ webdirsrc }}. {{ webdirdest }}"

- name: "Configure config.class.php" # I'll be amazed if this works
  template:
    src: httpd/config.class.php.j2
    dest: '{{ webdirdest }}lib/fog/config.class.php'
  with_items: 
    - { snmysqlhost: '{{ snmysqlhost }}', snmysqluser: '{{ snmysqluser }}', snmysqlpass: '{{ snmysqlpass }}', interface: '{{ interface }}', ipaddress: '{{ ipaddress }}', username: '{{ username }}', password: '{{ password }}', webdirdest: '{{ webdirdest }}', storageLocation: '{{ storageLocation }}', storageLocationCapture: '{{ storageLocationCapture }}', webroot: '{{ webroot }}', snapindir: '{{ snapindir }}' }   

# BEGIN downloadfiles

- name: "Check if init.xz exists"
  stat:
    path: '{{ webdirdest }}service/ipxe/init.xz'
  register: initXZExists

- name: "Downloading init.xz"
  get_url:
    url: https://fogproject.org/inits/init.xz 
    dest: '{{ webdirdest }}service/ipxe/init.xz'
  when: initXZExists.stat.exists == False

- name: "Check if init_32.xz exists"
  stat:
    path: '{{ webdirdest }}service/ipxe/init_32.xz' 
  register: init_32XZExists

- name: "Downloading init_32.xz"
  get_url:
    url: https://fogproject.org/inits/init_32.xz
    dest: '{{ webdirdest }}service/ipxe/init_32.xz' 
  when: init_32XZExists.stat.exists == False
    
- name: "Check if bzImage exists"
  stat:
    path: '{{ webdirdest }}service/ipxe/bzImage'
  register: bzImageExists

- name: "Downloading bzImage"
  get_url:
    url: https://fogproject.org/kernels/bzImage
    dest: '{{ webdirdest }}service/ipxe/bzImage'
  when: bzImageExists.stat.exists == False

- name: "Check if bzImage32 exists"
  stat:
    path: '{{ webdirdest }}service/ipxe/bzImage32'
  register: bzImage32Exists

- name: "Downloading bzImage32"
  get_url:
    url: https://fogproject.org/kernels/bzImage32
    dest: '{{ webdirdest }}service/ipxe/bzImage32'
  when: bzImage32Exists.stat.exists == False

- name: "Check if fogserviceMSI exists"
  stat:
    path: '{{ webdirdest }}client/FOGService.msi'
  register: FOGServiceMSIExists

- name: "Download FOG Service (MSI)"
  get_url:
    url: '{{ clienturl }}'
    dest: '{{ webdirdest }}client/FOGService.msi'
  when: FOGServiceMSIExists.stat.exists == False

- name: "Check if fogSmartInstaller exists"
  stat:
    path: '{{ webdirdest }}client/SmartInstaller.exe'
  register: fogSmartInstaller

- name: "Download FOG Smart Installer"
  get_url:
    url: '{{ siurl }}'
    dest: '{{ webdirdest }}client/SmartInstaller.exe'
  when: fogSmartInstaller.stat.exists == False

# END downloadfiles

- name: "Enable httpd"
  systemd:
    name: httpd
    enabled: yes
    state: started

- name: "Enable php-fpm"
  systemd:
    name: php-fpm 
    enabled: yes
    state: started

# BEGIN createSSLCA

- name: "Create snapin SSL CA Directory"
  file:
    path: '{{ sslpath }}CA'
    state: directory
    owner: fog
    group: apache
    mode: 0777 # This seems wrong from the script

- name: "Check if SSL CA Key Already Exists"
  stat: path='{{ vars["sslpath"] + "CA/.fogCA.key" }}'
  register: sslCAKeyExists

- name: "Generate SSL CA Key for Snapin Directory (Creating SSL CA)"
  shell:
    openssl genrsa -out '{{ vars["sslpath"] + "CA/.fogCA.key" }}' 4096
  when: sslCAKeyExists.stat.exists == False

- name: "Check if SSL PEM Key for Snaping Directory Already Exists"
  stat: path='{{ vars["sslpath"] + "CA/.fogCA.pem" }}'
  register: sslPEMKeyExists 

- name: "Generate SSL PEM Key for Snapin Directory"
  shell: |
    openssl req -x509 -new -sha512 -nodes -key '{{ vars["sslpath"] + "CA/.fogCA.key" }}' -days 3650 -out '{{ vars["sslpath"] + "CA/.fogCA.pem" }}' << EOF
    . 
    . 
    . 
    . 
    . 
    FOG Server CA 
    . 
    EOF
  when: sslPEMKeyExists.stat.exists == False

- name: "Creating SSL Private Key Directory (Creating SSL Private Key)"
  file:
    path: '{{ sslpath }}'
    state: directory
    owner: fog
    group: apache
    mode: 0777 # This seems wrong from the script TODO: Check/Fix

- name: "Check if SSL Private Key Already Exists"
  stat: path='{{sslprivkey}}'
  register: sslprivkeyExists

- name: "Creating SSL Private Key"
  shell:
    openssl genrsa -out '{{ sslprivkey }}' 4096 
  when: sslprivkeyExists.stat.exists == False

- name: "Check if SSL FOR CSR File Already Exists"
  stat: path='{{ vars["sslpath"] + "fog.csr" }}'
  register: sslFOGCSRExists

- name: "Create SSL FOG CSR file"
  shell: 
    cmd: |
      openssl req -new -sha512 -key '{{ sslprivkey }}' -out '{{ vars["sslpath"] + "fog.csr" }}' << EOF
      .
      .
      .
      .
      .
      '{{ ipaddress }}'
      .


      EOF
  when: sslFOGCSRExists.stat.exists == False
 
- name: "Creating SSL Certificate Directory"
  file:
    path: '{{ webdirdest }}management/other/ssl'
    state: directory
    owner: apache
    group: apache
    mode: 0777 # This seems wrong from the script TODO: Check/Fix

- name: "Check if SSL Certificate for webdirdest/management/other/ssl Already Exists"
  stat: path='{{ vars["docroot"] + "fog/" + "management/other/ssl/srvpublic.crt" }}'
  register: sslCertificateWebdirExsits

- name: "Create SSL Certificate for webdirdest/management/other/ssl (Creating SSL Certificate)" # This will probably break
  shell:
    openssl x509 -req -in '{{ vars["sslpath"] + "fog.csr" }}' -CA '{{ vars["sslpath"] + "CA/.fogCA.pem" }}' -CAkey '{{ vars["sslpath"] + "CA/.fogCA.key" }}' -CAcreateserial -out '{{ vars["docroot"] + "fog/" + "management/other/ssl/srvpublic.crt" }}' -days 3650
  when: sslCertificateWebdirExsits.stat.exists == False

- name: "Copy management/other/fogCA.pem"
  copy:
    src: '{{ sslpath }}CA/.fogCA.pem'
    dest: '{{ webdirdest }}management/other/ca.cert.pem'
    remote_src: yes

- name: "Check if public key Already Exists"
  stat: path='{{ vars["docroot"] + "fog/" + "management/other/ca.cert.der" }}'
  register: publickeyExists

- name: "Generate public keys and auths"
  shell: 
    openssl x509 -outform der -in '{{ vars["docroot"] + "fog/" + "management/other/ca.cert.pem" }}' -out '{{ vars["docroot"] + "fog/" + "management/other/ca.cert.der" }}' 2>&1
  when: publickeyExists.stat.exists == False

- name: "Fix permissions in webdir"
  shell:
    chown -R '{{ apacheuser }}':'{{ apacheuser }}' '{{ vars["docroot"] + "fog/" + "management/other" }}'
   
# END createSSLCA

- name: "Copy FOG Host file to etcdest"
  template:
    src: httpd/fog.conf.j2
    dest: '{{ etcconf }}'
  with_items: 
    - { ipaddress: '{{ ipaddress }}', docroot: '{{ docroot }}', webdirdest: '{{ webdirdest }}' }   
  notify: "restart web services"

- name: "Changing permissions on apache log files"
  shell: 
    chmod +rx '{{ apachelogdir }}' '{{ apacheerrlog }}' '{{ apacheacclog }}'

# Create Symlink in webdir (WHY???? I have to do this otherwise the web interface breaks)
- name: "Create Symlink to iteself (for some reason)"
  file:
    src: /var/www/html/fog
    dest: /var/www/html/fog/fog
    owner: apache
    group: apache
    state: link
    force: yes

- name: "Fix apache permissions"
  shell: chown -R '{{ apacheuser }}':'{{ apacheuser }}' '{{ webdirdest }}'

# END configureHttpd

# Skipping backupDB
# Skipping updateDB

# BEGIN configureStorage

- name: "Setting up storageLocation directory"
  file:
    path: '{{ storageLocation }}'
    state: directory
    owner: fog
    group: root
    mode: 0777 # This seems wrong :(

- name: "Touch .mntcheck if it doesn't exist"
  file:
    path: '{{ storageLocation }}/.mntcheck'
    state: touch
    owner: fog
    group: root
    mode: 0777

- name: "Create postdownloadscripts under storageLocation"
  file:
    path: '{{ storageLocation }}/postdownloadscripts'
    state: directory
    owner: fog
    group: root
    mode: 0777 # This seems wrong :(
     
- name: "Configure fog.postdownload" # I'll be amazed if this works
  template:
    src: storageLocation/fog.postdownload.j2
    dest: '{{ storageLocation }}/postdownloadscripts/fog.postdownload'

- name: "Create storageLocationCapture directory"
  file:
    path: '{{ storageLocationCapture }}'
    state: directory
    owner: fog
    group: root
    mode: 0777 # This seems wrong :

- name: "Touch .mntcheck if it doesn't exist under storageLocationCapture"
  file:
    path: '{{ storageLocationCapture }}/.mntcheck'
    state: touch
    owner: fog
    group: root
    mode: 0777

- name: "Create postinitscripts under storageLocationCapture"
  file:
    path: '{{ storageLocationCapture }}/postinitscripts'
    state: directory
    owner: fog
    group: root
    mode: 0777 # This seems wrong :(

- name: "Configure fog.postinit" # I'll be amazed if this works
  template:
    src: storageLocation/fog.postinit.j2
    dest: '{{ storageLocationCapture }}/postinitscripts/fog.postinit'

- name: "Fix storageLocation Permissions"  
  shell: 
    chmod -R 777 '{{ storageLocation }}' '{{ storageLocationCapture }}'

- name: "Change storageLocation ownership"
  shell:
    chown -R '{{ username }}' '{{ storageLocation }}' '{{ storageLocationCapture }}'

# FINISH configureStorage

# skipping configureDHCP

# BEGIN configureTFTPandPXE

- name: "Create tftpdirdst directory"
  file:
    path: '{{ tftpdirdst }}'
    state: directory
    owner: fog
    group: root
    mode: 0751   

- name: "Remove tftpdirdst.prev"
  file:
    path: '{{ tftpdirdst }}.prev'
    state: absent

- name: "Create tftpdirdst.prev"
  file:
    path: '{{ tftpdirdst }}.prev'
    state: directory
    owner: root
    group: root
    mode: 0751   

- name: "Remove tftpdirdst.fogbackup (if it exists)"
  file:
    path: '{{ tftpdirdst }}.fogbackup'
    state: absent

- name: "Backup files from tftpdirdst to tftpdirdst.prev"
  shell: 
    cp -Rf /tftpboot/. /tftpboot.prev/

- name: "Create directories from a different directory (and fix permissions)"
  shell: |
    cp -rp '{{ fogprojectdir }}'/packages/tftp/. /tftpboot/.

    chown -R '{{ username }}' '{{ tftpdirdst }}' 
    chown -R '{{ username }}' '{{ webdirdest }}'service/ipxe 

    find '{{ tftpdirdst }}' -type d -exec chmod 755 {} \; 
    find '{{ webdirdest }}' -type d -exec chmod 755 {} \; 
    find '{{ tftpdirdst }}' ! -type d -exec chmod 655 {} \; 

# configureDefaultiPXEfile

- name: "Copy default.ipxe to server"
  template:
    src: tftpboot/default.ipxe.j2
    dest: '{{ tftpdirdst }}/default.ipxe'
  with_items: 
    - { ipaddress: '{{ ipaddress }}' }   

- name: "Create backup for tftpconfig"
  shell: |
    if [[ -f '{{ item.tftpconfig }}' ]]; then
      cp -Rf '{{ item.tftpconfig }}' '{{ item.tftpconfig }}'.fogbackup 
    fi
  with_items:
    - { tftpconfig: '{{ tftpconfig }}' }  

- name: "Copy tftp server config to tftpconfig"
  template:
    src: tftpboot/tftp.j2
    dest: '{{ tftpconfig }}'

- name: "Enable and restart xinetd"
  systemd:
    name: xinetd
    state: restarted
    enabled: yes
# END configureTFTPandPXE

# BEGIN configureFTP
- name: "Copy VSFTP Config" # Skipping the backup portion though...
  template:
    src: vsftpd/vsftpd.conf.j2
    dest: '{{ ftpconfig }}'

- name: "Enable and restart VSFTPD"
  systemd:
    name: vsftpd
    state: restarted
    enabled: yes

# END configureFTP

# BEGIN configureSnapins
- name: "Setting up FOG Snapins"
  file:
    path: '{{ snapindir }}'
    state: directory
    owner: '{{ username }}'
    group: '{{ apacheuser }}'
    mode: 0777 # This seems wrong :(
# END configureSnapins

# BEGIN configureUDPCast

- name: Extract UDPCast folder to /tmp
  unarchive:
    src: '{{ udpcastsrc }}'
    dest: /tmp/
    remote_src: yes

- name: "Setting up UDPCast"
  shell: |
    cd '{{ udpcasttmp }}'
    ./configure 
    make 
    make install 

# END configureUDPCast

# BEGIN installInitScript
- name: "Installing FOG System Scripts"
  shell: cp -f '{{ fogprojectdir }}/{{ initdsrc }}'/* '{{ initdpath }}'/ 

- name: "Reload system daemons"
  systemd: daemon_reload=yes
  
- name: "Change Permissions for Services"
  file:
    path: '{{ initdpath + "/" + item.servicename }}'
    owner: root
    group: root
    mode: 0644
  with_items: 
    - { servicename: '{{ initdMCfullname }}'}
    - { servicename: '{{ initdIRfullname }}'}
    - { servicename: '{{ initdSDfullname }}'}
    - { servicename: '{{ initdSRfullname }}'}
    - { servicename: '{{ initdSHfullname }}'}
    - { servicename: '{{ initdPHfullname }}'}
    - { servicename: '{{ initdISfullname }}'}

- name: "Enable FOG Services"
  systemd:
    name: '{{ item }}'
    state: stopped
    enabled: yes
  with_items: 
    - '{{ initdMCfullname }}'
    - '{{ initdIRfullname }}'
    - '{{ initdSDfullname }}'
    - '{{ initdSRfullname }}'
    - '{{ initdSHfullname }}'
    - '{{ initdPHfullname }}'
    - '{{ initdISfullname }}'

# END installInitScript

# BEGIN installFOGServices

- name: "Create FOG Service Directory"
  file:
    path: '{{ servicedst }}'
    state: directory
    owner: root
    group: root
    mode: 0771   

- name: "Copy FOG Services from packages to system location"
  shell: 
    cp -Rf '{{ fogprojectdir }}'/packages/service/. '{{ servicedst + "/" }}'

- name: "Fix FOG Service Permissions"
  shell:
    chmod +x -R '{{ servicedst }}'/

- name: "Create Service log Directory"
  file:
    path: '{{ servicelogs }}'
    state: directory
    owner: root
    group: root
    mode: 0755  

# END installFOGServices

# BEGIN configureFOGService

- name: "Create FOG Service Etc Directory"
  file:
    path: '{{ servicedst }}/etc'
    state: directory
    owner: root
    group: root
    mode: 0771   

- name: "Configure config.php" # I'll be amazed if this works
  template:
    src: fogServices/config.php.j2
    dest: '{{ servicedst }}/etc/config.php'
  with_items: 
    - { webdirdest: '{{ webdirdest }}' }   

- name: "Restart FOG Services"
  systemd:
    name: '{{ item.servicename }}'
    state: restarted
    enabled: yes
  with_items: 
    - { servicename: '{{ initdMCfullname }}'}
    - { servicename: '{{ initdIRfullname }}'}
    - { servicename: '{{ initdSDfullname }}'}
    - { servicename: '{{ initdSRfullname }}'}
    - { servicename: '{{ initdSHfullname }}'}
    - { servicename: '{{ initdPHfullname }}'}
    - { servicename: '{{ initdISfullname }}'}

# END configureFOGService

# BEGIN configureNFS

- name: "Setting up exports file"
  template:
    src: nfs/exports.j2
    dest: '{{ nfsconfig }}'
  with_items: 
    - { storageLocation: '{{ storageLocation }}' }   

- name: "Setting up and starting RPCBind"
  systemd:
    name: rpcbind.service
    state: restarted
    enabled: yes

- name: "Setting up and starting NFS Server..."  
  systemd:
    name: '{{ item.servicename }}'
    state: restarted
    enabled: yes
  with_items: 
    - { servicename: 'nfs-server'}
    - { servicename: 'nfs'}
           
# END configureNFS

# BEGIN writeUpdateFile

- name: "Setting up fogsettings file" # I can add more variables to this file in the future if necessary
  template:
    src: fogsettings/fogsettings.j2
    dest: '{{ fogprogramdir }}/.fogsettings'
  with_items: 
    - { version: '{{ version }}', ipaddress: '{{ ipaddress }}', interface: '{{ interface }}', subnet: '{{ subnet }}', username: '{{ username }}', password: '{{ password }}' } 

# END writeUpdateFile

# BEGIN linkOptFogDir

- name: "Linking FOG Logs to Linux Logs"
  file:
    src: /opt/fog/log
    dest: /var/log/fog
    owner: root
    group: root
    state: link
    
- name: "Linking FOG Service Config to Linux Config (/etc)"
  file:
    src: /opt/fog/service/etc
    dest: /etc/fog
    owner: root
    group: root
    state: link
       
- name: "Fix Permissions to httpd and php logs"
  shell: |
    chmod -R 755 /var/log/httpd 
    for i in $(find /var/log/ -type d -name 'php*fpm*'); do
        chmod -R 755 $i 
    done
    for i in $(find /var/log/ -type f -name 'php*fpm*'); do
        chmod -R 755 $i 
    done

# END linkOptFogDir

# BEGIN updateStorageNodeCredentials

- name: "Ensuring node username and passwords match"
  shell: | 
    wget --no-check-certificate -qO - http://'{{ ipaddress + webroot + "maintenance/create_update_node.php" }}' --post-data="nodePass&ip=$(echo -n '{{ ipaddress }}'|base64)&user=$(echo -n '{{ username }}'|base64)&pass=$(echo -n "password"|base64)&fogverified"

# END updateStorageNodeCredentials

# BEGIN Print Final Message

- name: FOG Installation Complete!
  debug:
    msg:
      - '* Setup complete'
      - '- You can now login to the FOG Management Portal using'
      - '- the information listed below.  The login information'
      - '- is only if this is the first install.'
      - '- This can be done by opening a web browser and going to: '
      - '- http://{{ ipaddress }}{{ webroot }}management' 
      - '- Default User Information' 
      - '- Username: fog'     
      - '- Password: password'      

# END Print Final Message

- name: Install dnsmasq
  yum: 
    name:
      - dnsmasq

 - name: "Enable dnsmasq over firewalld"
  firewalld: 
    service: dns
    permanent: true
    state: enabled

- name: Copy dnsmasq config
  template:
    src=ltsp.conf.j2
    dest=/etc/dnsmasq.d/ltsp.conf
  with_items: 
    - { ipaddress: '{{ ipaddress }}' }  
  notify:
    - restart dnsmasq     